import { App, Plugin, PluginSettingTab, Setting, TFile, Notice } from 'obsidian';
import OpenAI from 'openai';

type Provider = 'openai' | 'ollama';

interface AutoTitleSettings {
    provider: Provider;
    openaiApiKey: string;
    ollamaUrl: string;
    ollamaModel: string;
    availableModels: string[];
    autoRename: boolean;
    onlyRenameUntitled: boolean;
}

const DEFAULT_SETTINGS: AutoTitleSettings = {
    provider: 'ollama',
    openaiApiKey: '',
    ollamaUrl: 'http://localhost:11434',
    ollamaModel: 'llama2',
    availableModels: [],
    autoRename: true,
    onlyRenameUntitled: true,
}

// Fixed prompt that is not user customizable
const TITLE_GENERATION_PROMPT = 'Analyze the following note content and create a precise title using this format: identify the single most important CORE NOUN that represents what this note is about, then add 2-4 helper words that provide essential context. Return ONLY the title words in this order: [helper words] [CORE NOUN]. Do not include quotes, explanations, or multiple title options. Examples: "Project Planning Meeting", "Database Schema Design", "Python Error Handling". Content to analyze:\n\n';

interface OllamaResponse {
    model: string;
    created_at: string;
    message: {
        role: string;
        content: string;
    };
    done: boolean;
    total_duration?: number;
    load_duration?: number;
    prompt_eval_count?: number;
    prompt_eval_duration?: number;
    eval_count?: number;
    eval_duration?: number;
}

interface OllamaModel {
    name: string;
    size: number;
    digest: string;
    details: {
        format: string;
        family: string;
        families?: string[];
        parameter_size: string;
        quantization_level: string;
    };
    modified_at: string;
}

export default class AutoTitlePlugin extends Plugin {
    settings: AutoTitleSettings = DEFAULT_SETTINGS;
    openai: OpenAI | null = null;
    untitledFiles: Set<string> = new Set(); // Track files that had "Untitled" when opened

    async onload() {
        await this.loadSettings();

        // Initialize API client if API key is provided
        if (this.settings.provider === 'openai' && this.settings.openaiApiKey) {
            this.initializeOpenAI();
        }

        // Initialize Ollama models if provider is Ollama
        if (this.settings.provider === 'ollama' && this.settings.ollamaUrl) {
            this.initializeOllama();
        }

        // Add command to manually generate title for current file
        this.addCommand({
            id: 'generate-title',
            name: 'Generate AI title for current file',
            callback: () => {
                const activeFile = this.app.workspace.getActiveFile();
                if (activeFile) {
                    this.generateTitleForFile(activeFile);
                } else {
                    new Notice('No active file to rename');
                }
            }
        });

        // Add ribbon icon
        this.addRibbonIcon('brain-circuit', 'Generate AI title', () => {
            const activeFile = this.app.workspace.getActiveFile();
            if (activeFile) {
                this.generateTitleForFile(activeFile);
            } else {
                new Notice('No active file to rename');
            }
        });

        // Auto-rename logic based on settings
        if (this.settings.autoRename) {
            if (this.settings.onlyRenameUntitled) {
                // Track when files with "Untitled" are opened and rename when left
                this.registerEvent(
                    this.app.workspace.on('active-leaf-change', (leaf) => {
                        const activeFile = this.app.workspace.getActiveFile();

                        // Check if the new active file has "Untitled" in its name
                        if (activeFile && activeFile.basename.includes('Untitled')) {
                            this.untitledFiles.add(activeFile.path);
                        }
                    })
                );

                // Listen for when the active file changes to rename the previous file if it was "Untitled"
                this.registerEvent(
                    this.app.workspace.on('active-leaf-change', (leaf) => {
                        // Get all currently tracked untitled files and check if any are no longer active
                        const activeFile = this.app.workspace.getActiveFile();
                        const currentActivePath = activeFile?.path;

                        // Check each tracked file to see if it's no longer active
                        for (const filePath of this.untitledFiles) {
                            if (filePath !== currentActivePath) {
                                const file = this.app.vault.getAbstractFileByPath(filePath);
                                if (file instanceof TFile && file.basename.includes('Untitled')) {
                                    // File is no longer active and still has "Untitled" - rename it
                                    setTimeout(() => {
                                        this.generateTitleForFile(file, true);
                                    }, 500); // Small delay to ensure file is fully saved
                                    this.untitledFiles.delete(filePath);
                                }
                            }
                        }
                    })
                );

                // Also handle file deletion/rename to clean up tracking
                this.registerEvent(
                    this.app.vault.on('delete', (file) => {
                        if (file instanceof TFile) {
                            this.untitledFiles.delete(file.path);
                        }
                    })
                );

                this.registerEvent(
                    this.app.vault.on('rename', (file, oldPath) => {
                        if (file instanceof TFile) {
                            this.untitledFiles.delete(oldPath);
                            // If renamed file still has "Untitled" and is not active, track it
                            const activeFile = this.app.workspace.getActiveFile();
                            if (file.basename.includes('Untitled') && file.path !== activeFile?.path) {
                                this.untitledFiles.add(file.path);
                            }
                        }
                    })
                );
            } else {
                // Original behavior - rename immediately when created
                this.registerEvent(
                    this.app.vault.on('create', (file) => {
                        if (file instanceof TFile) {
                            // Wait a bit for the file to be created and potentially have content
                            setTimeout(() => {
                                this.generateTitleForFile(file, true);
                            }, 1000);
                        }
                    })
                );
            }
        }

        // Add settings tab
        this.addSettingTab(new AutoTitleSettingTab(this.app, this));
    }

    onunload() {
        // Clean up tracking
        this.untitledFiles.clear();
    }

    initializeOpenAI() {
        try {
            this.openai = new OpenAI({
                apiKey: this.settings.openaiApiKey,
            });
        } catch (error) {
            console.error('Failed to initialize OpenAI:', error);
            new Notice('Failed to initialize OpenAI. Please check your API key.');
        }
    }

    async initializeOllama() {
        try {
            const isValid = await this.validateOllamaConnection();
            if (isValid) {
                const models = await this.fetchOllamaModels();
                this.settings.availableModels = models;
                await this.saveSettings();
                console.log(`Ollama initialized with ${models.length} models available`);
            } else {
                console.warn('Failed to connect to Ollama server');
            }
        } catch (error) {
            console.error('Failed to initialize Ollama:', error);
        }
    }

    async validateOllamaConnection(): Promise<boolean> {
        try {
            const response = await fetch(`${this.settings.ollamaUrl}/api/tags`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });
            return response.ok;
        } catch (error) {
            console.error('Ollama connection error:', error);
            return false;
        }
    }

    async fetchOllamaModels(): Promise<string[]> {
        try {
            const response = await fetch(`${this.settings.ollamaUrl}/api/tags`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                },
            });

            if (!response.ok) {
                throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            return data.models?.map((model: OllamaModel) => model.name) || [];
        } catch (error) {
            console.error('Error fetching Ollama models:', error);
            return [];
        }
    }

    async callOllamaAPI(content: string): Promise<string | null> {
        try {
            const response = await fetch(`${this.settings.ollamaUrl}/api/chat`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    model: this.settings.ollamaModel,
                    messages: [
                        {
                            role: 'user',
                            content: TITLE_GENERATION_PROMPT + content.substring(0, 2000)
                        }
                    ],
                    stream: false,
                    options: {
                        temperature: 0.7,
                        num_predict: 50,
                    }
                }),
            });

            if (!response.ok) {
                throw new Error(`Ollama API error: ${response.status} ${response.statusText}`);
            }

            const data: OllamaResponse = await response.json();

            if (data.message && data.message.content) {
                return data.message.content.trim() || null;
            }

            return null;
        } catch (error) {
            console.error('Ollama API error:', error);
            throw error;
        }
    }

    async generateTitleForFile(file: TFile, isAutoRename: boolean = false) {
        // Check if API is configured
        if (this.settings.provider === 'openai' && !this.openai) {
            new Notice('OpenAI not configured. Please set your API key in settings.');
            return;
        }

        if (this.settings.provider === 'ollama' && !this.settings.ollamaUrl) {
            new Notice('Ollama not configured. Please set your Ollama URL in settings.');
            return;
        }

        try {
            // Read file content - this may fail for binary files
            let content: string;
            try {
                content = await this.app.vault.read(file);
            } catch (readError) {
                if (!isAutoRename) {
                    new Notice('Cannot read file content - may be a binary file');
                }
                return;
            }

            // Skip if file is empty or very short
            if (content.trim().length < 10) {
                if (!isAutoRename) {
                    new Notice('File content is too short to generate a meaningful title');
                }
                return;
            }

            // Skip if file is very large (over 100KB of text)
            if (content.length > 100000) {
                if (!isAutoRename) {
                    new Notice('File is too large for title generation');
                }
                return;
            }

            // Skip if file already has a custom name (not default "Untitled")
            if (isAutoRename && this.settings.onlyRenameUntitled && !file.basename.startsWith('Untitled')) {
                return;
            }

            new Notice(`Generating AI title using ${this.settings.provider}...`);

            let suggestedTitle: string | null = null;

            if (this.settings.provider === 'openai') {
                // Call OpenAI API
                const response = await this.openai!.chat.completions.create({
                    model: 'gpt-3.5-turbo',
                    messages: [
                        {
                            role: 'user',
                            content: TITLE_GENERATION_PROMPT + content.substring(0, 2000) // Limit content length
                        }
                    ],
                    max_tokens: 50,
                    temperature: 0.7,
                });

                suggestedTitle = response.choices[0]?.message?.content?.trim() || null;
            } else if (this.settings.provider === 'ollama') {
                // Call Ollama API
                suggestedTitle = await this.callOllamaAPI(content);
            }

            if (!suggestedTitle) {
                new Notice('Failed to generate title');
                return;
            }

            // Clean up the title (remove quotes, special characters that aren't allowed in filenames)
            const cleanTitle = suggestedTitle
                .replace(/["`]/g, '')
                .replace(/[\\/:*?"<>|]/g, '-')
                .trim();

            // Create new file path, preserving the original extension
            const dir = file.parent?.path || '';
            const extension = file.extension;
            const newPath = dir ? `${dir}/${cleanTitle}.${extension}` : `${cleanTitle}.${extension}`;

            // Check if file with this name already exists
            const existingFile = this.app.vault.getAbstractFileByPath(newPath);
            if (existingFile && existingFile !== file) {
                new Notice(`File "${cleanTitle}.${extension}" already exists`);
                return;
            }

            // Rename the file
            await this.app.fileManager.renameFile(file, newPath);
            new Notice(`File renamed to: ${cleanTitle}.${extension}`);

        } catch (error) {
            console.error('Error generating title:', error);
            new Notice(`Failed to generate title using ${this.settings.provider}. Please check your configuration and try again.`);
        }
    }

    async loadSettings() {
        this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
    }

    async saveSettings() {
        await this.saveData(this.settings);

        // Reinitialize providers based on current settings
        if (this.settings.provider === 'openai' && this.settings.openaiApiKey) {
            this.initializeOpenAI();
        } else {
            this.openai = null;
        }

        if (this.settings.provider === 'ollama' && this.settings.ollamaUrl) {
            this.initializeOllama();
        }
    }
}

class AutoTitleSettingTab extends PluginSettingTab {
    plugin: AutoTitlePlugin;

    constructor(app: App, plugin: AutoTitlePlugin) {
        super(app, plugin);
        this.plugin = plugin;
    }

    display(): void {
        const { containerEl } = this;

        containerEl.empty();

        containerEl.createEl('h2', { text: 'Auto Title Settings' });

        // Provider selection
        new Setting(containerEl)
            .setName('AI Provider')
            .setDesc('Choose which AI provider to use for title generation')
            .addDropdown(dropdown => dropdown
                .addOption('openai', 'OpenAI')
                .addOption('ollama', 'Ollama')
                .setValue(this.plugin.settings.provider)
                .onChange(async (value: string) => {
                    this.plugin.settings.provider = value as Provider;
                    await this.plugin.saveSettings();
                    this.display(); // Refresh display to show/hide relevant settings
                }));

        // OpenAI settings
        if (this.plugin.settings.provider === 'openai') {
            new Setting(containerEl)
                .setName('OpenAI API Key')
                .setDesc('Enter your OpenAI API key to enable AI title generation')
                .addText(text => text
                    .setPlaceholder('sk-...')
                    .setValue(this.plugin.settings.openaiApiKey)
                    .onChange(async (value) => {
                        this.plugin.settings.openaiApiKey = value;
                        await this.plugin.saveSettings();
                    }));
        }

        // Ollama settings
        if (this.plugin.settings.provider === 'ollama') {
            new Setting(containerEl)
                .setName('Ollama URL')
                .setDesc('Enter your Ollama server URL (e.g., http://localhost:11434)')
                .addText(text => text
                    .setPlaceholder('http://localhost:11434')
                    .setValue(this.plugin.settings.ollamaUrl)
                    .onChange(async (value) => {
                        this.plugin.settings.ollamaUrl = value;
                        await this.plugin.saveSettings();
                        // Validate connection and fetch models
                        this.validateAndFetchModels();
                    }));

            new Setting(containerEl)
                .setName('Ollama Model')
                .setDesc('Select the model to use for title generation')
                .addDropdown(dropdown => {
                    // Add current model as option if not in available models
                    if (!this.plugin.settings.availableModels.includes(this.plugin.settings.ollamaModel)) {
                        dropdown.addOption(this.plugin.settings.ollamaModel, this.plugin.settings.ollamaModel);
                    }
                    // Add all available models
                    this.plugin.settings.availableModels.forEach(model => {
                        dropdown.addOption(model, model);
                    });
                    return dropdown
                        .setValue(this.plugin.settings.ollamaModel)
                        .onChange(async (value) => {
                            this.plugin.settings.ollamaModel = value;
                            await this.plugin.saveSettings();
                        });
                });
        }

        new Setting(containerEl)
            .setName('Auto-rename new files')
            .setDesc('Automatically generate titles for new files')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.autoRename)
                .onChange(async (value) => {
                    this.plugin.settings.autoRename = value;
                    await this.plugin.saveSettings();
                }));

        new Setting(containerEl)
            .setName('Only rename Untitled files')
            .setDesc('When auto-rename is enabled, only rename files that have "Untitled" in their name, and only when the file is left or closed')
            .addToggle(toggle => toggle
                .setValue(this.plugin.settings.onlyRenameUntitled)
                .onChange(async (value) => {
                    this.plugin.settings.onlyRenameUntitled = value;
                    await this.plugin.saveSettings();
                }));

        containerEl.createEl('h3', { text: 'Usage' });
        containerEl.createEl('p', { text: 'Use the command palette (Cmd/Ctrl+P) and search for "Generate AI title" or click the brain icon in the ribbon to generate a title for the current file.' });
        containerEl.createEl('p', { text: 'When auto-rename is enabled, new files will automatically get AI-generated titles based on their content. Works with all text-based file types.' });

        if (this.plugin.settings.provider === 'ollama') {
            containerEl.createEl('p', { text: 'Ollama provides local AI model execution with privacy and customization benefits.' });
        }

        containerEl.createEl('h3', { text: 'Title Generation' });
        containerEl.createEl('p', { text: 'The AI uses a fixed prompt designed to generate concise 2-5 word titles that accurately describe your note content. The original file extension is preserved.' });
    }

    async validateAndFetchModels() {
        const isValid = await this.plugin.validateOllamaConnection();
        if (isValid) {
            const models = await this.plugin.fetchOllamaModels();
            this.plugin.settings.availableModels = models;
            await this.plugin.saveSettings();
            this.display(); // Refresh to update model dropdown
        }
    }
} 